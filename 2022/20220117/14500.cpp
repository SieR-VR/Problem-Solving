#include <iostream>

using namespace std;

int map[500][500];

int n, m;

bool check(int i, int j)
{
    return (i >= 0) && (j >= 0) && (i < n) && (j < m);
}

int main()
{
    cin >> n >> m;
    int res = 0;

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> map[i][j];
        }
    }

    int blocks[][4][2] = {
        {{0, 0}, {0, 1}, {0, 2}, {0, 3}},
        {{0, 0}, {1, 0}, {2, 0}, {3, 0}},
        {{0, 0}, {1, 0}, {0, 1}, {1, 1}},
        {{0, 0}, {1, 0}, {2, 0}, {2, 1}},
        {{0, 0}, {1, 0}, {2, 0}, {2, -1}},
        {{0, 0}, {0, -1}, {0, -2}, {1, -2}},
        {{0, 0}, {0, -1}, {0, -2}, {-1, -2}},
        {{0, 0}, {-1, 0}, {-2, 0}, {-2, 1}},
        {{0, 0}, {-1, 0}, {-2, 0}, {-2, -1}},
        {{0, 0}, {0, 1}, {0, 2}, {1, 2}},
        {{0, 0}, {0, 1}, {0, 2}, {-1, 2}},
        {{0, 0}, {1, 0}, {1, 1}, {2, 1}},
        {{0, 0}, {1, 0}, {1, -1}, {2, -1}},
        {{0, 0}, {0, 1}, {1, 1}, {1, 2}},
        {{0, 0}, {0, 1}, {-1, 1}, {-1, 2}},
        {{0, 0}, {-1, 0}, {-1, 1}, {-2, 1}},
        {{0, 0}, {-1, 0}, {-1, -1}, {-2, -1}},
        {{0, 0}, {0, -1}, {1, -1}, {1, -2}},
        {{0, 0}, {0, -1}, {-1, -1}, {-1, -2}},
        {{0, 0}, {-1, 0}, {1, 0}, {0, 1}},
        {{0, 0}, {-1, 0}, {1, 0}, {0, -1}},
        {{0, 0}, {0, -1}, {0, 1}, {1, 0}},
        {{0, 0}, {0, -1}, {0, 1}, {-1, 0}},
    };

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            for (int k = 0; k < 23; k++)
            {
                if (
                    check(i + blocks[k][0][0], j + blocks[k][0][1]) &&
                    check(i + blocks[k][1][0], j + blocks[k][1][1]) &&
                    check(i + blocks[k][2][0], j + blocks[k][2][1]) &&
                    check(i + blocks[k][3][0], j + blocks[k][3][1]))
                {
                    res = max(res, 
                        map[i + blocks[k][0][0]][j + blocks[k][0][1]] + 
                        map[i + blocks[k][1][0]][j + blocks[k][1][1]] + 
                        map[i + blocks[k][2][0]][j + blocks[k][2][1]] + 
                        map[i + blocks[k][3][0]][j + blocks[k][3][1]]
                    );
                }
            }
        }
    }

    cout << res;
}